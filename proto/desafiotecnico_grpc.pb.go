// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1--rc1
// source: desafiotecnico.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpVoteServiceClient is the client API for UpVoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpVoteServiceClient interface {
	CreateACrypto(ctx context.Context, in *RequestNewCrypto, opts ...grpc.CallOption) (*ResponseNewCrypto, error)
	EditACrypto(ctx context.Context, in *RequestEditCrypto, opts ...grpc.CallOption) (*ResponseEditCrypto, error)
	DeleteACrypto(ctx context.Context, in *RequestDeleteCrypto, opts ...grpc.CallOption) (*ResponseDeleteCrypto, error)
	ListAllCryptosOrderedByVoteDesc(ctx context.Context, in *RequestListAllCryptos, opts ...grpc.CallOption) (*ResponseListAllCryptos, error)
	ListAllCryptosOrderedByVoteAsc(ctx context.Context, in *RequestListAllCryptos, opts ...grpc.CallOption) (*ResponseListAllCryptos, error)
}

type upVoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpVoteServiceClient(cc grpc.ClientConnInterface) UpVoteServiceClient {
	return &upVoteServiceClient{cc}
}

func (c *upVoteServiceClient) CreateACrypto(ctx context.Context, in *RequestNewCrypto, opts ...grpc.CallOption) (*ResponseNewCrypto, error) {
	out := new(ResponseNewCrypto)
	err := c.cc.Invoke(ctx, "/proto.upVoteService/CreateACrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upVoteServiceClient) EditACrypto(ctx context.Context, in *RequestEditCrypto, opts ...grpc.CallOption) (*ResponseEditCrypto, error) {
	out := new(ResponseEditCrypto)
	err := c.cc.Invoke(ctx, "/proto.upVoteService/EditACrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upVoteServiceClient) DeleteACrypto(ctx context.Context, in *RequestDeleteCrypto, opts ...grpc.CallOption) (*ResponseDeleteCrypto, error) {
	out := new(ResponseDeleteCrypto)
	err := c.cc.Invoke(ctx, "/proto.upVoteService/DeleteACrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upVoteServiceClient) ListAllCryptosOrderedByVoteDesc(ctx context.Context, in *RequestListAllCryptos, opts ...grpc.CallOption) (*ResponseListAllCryptos, error) {
	out := new(ResponseListAllCryptos)
	err := c.cc.Invoke(ctx, "/proto.upVoteService/ListAllCryptosOrderedByVoteDesc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upVoteServiceClient) ListAllCryptosOrderedByVoteAsc(ctx context.Context, in *RequestListAllCryptos, opts ...grpc.CallOption) (*ResponseListAllCryptos, error) {
	out := new(ResponseListAllCryptos)
	err := c.cc.Invoke(ctx, "/proto.upVoteService/ListAllCryptosOrderedByVoteAsc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpVoteServiceServer is the server API for UpVoteService service.
// All implementations must embed UnimplementedUpVoteServiceServer
// for forward compatibility
type UpVoteServiceServer interface {
	CreateACrypto(context.Context, *RequestNewCrypto) (*ResponseNewCrypto, error)
	EditACrypto(context.Context, *RequestEditCrypto) (*ResponseEditCrypto, error)
	DeleteACrypto(context.Context, *RequestDeleteCrypto) (*ResponseDeleteCrypto, error)
	ListAllCryptosOrderedByVoteDesc(context.Context, *RequestListAllCryptos) (*ResponseListAllCryptos, error)
	ListAllCryptosOrderedByVoteAsc(context.Context, *RequestListAllCryptos) (*ResponseListAllCryptos, error)
	mustEmbedUnimplementedUpVoteServiceServer()
}

// UnimplementedUpVoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpVoteServiceServer struct {
}

func (UnimplementedUpVoteServiceServer) CreateACrypto(context.Context, *RequestNewCrypto) (*ResponseNewCrypto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateACrypto not implemented")
}
func (UnimplementedUpVoteServiceServer) EditACrypto(context.Context, *RequestEditCrypto) (*ResponseEditCrypto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditACrypto not implemented")
}
func (UnimplementedUpVoteServiceServer) DeleteACrypto(context.Context, *RequestDeleteCrypto) (*ResponseDeleteCrypto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteACrypto not implemented")
}
func (UnimplementedUpVoteServiceServer) ListAllCryptosOrderedByVoteDesc(context.Context, *RequestListAllCryptos) (*ResponseListAllCryptos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllCryptosOrderedByVoteDesc not implemented")
}
func (UnimplementedUpVoteServiceServer) ListAllCryptosOrderedByVoteAsc(context.Context, *RequestListAllCryptos) (*ResponseListAllCryptos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllCryptosOrderedByVoteAsc not implemented")
}
func (UnimplementedUpVoteServiceServer) mustEmbedUnimplementedUpVoteServiceServer() {}

// UnsafeUpVoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpVoteServiceServer will
// result in compilation errors.
type UnsafeUpVoteServiceServer interface {
	mustEmbedUnimplementedUpVoteServiceServer()
}

func RegisterUpVoteServiceServer(s grpc.ServiceRegistrar, srv UpVoteServiceServer) {
	s.RegisterService(&UpVoteService_ServiceDesc, srv)
}

func _UpVoteService_CreateACrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNewCrypto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpVoteServiceServer).CreateACrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.upVoteService/CreateACrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpVoteServiceServer).CreateACrypto(ctx, req.(*RequestNewCrypto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpVoteService_EditACrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditCrypto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpVoteServiceServer).EditACrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.upVoteService/EditACrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpVoteServiceServer).EditACrypto(ctx, req.(*RequestEditCrypto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpVoteService_DeleteACrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteCrypto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpVoteServiceServer).DeleteACrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.upVoteService/DeleteACrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpVoteServiceServer).DeleteACrypto(ctx, req.(*RequestDeleteCrypto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpVoteService_ListAllCryptosOrderedByVoteDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestListAllCryptos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpVoteServiceServer).ListAllCryptosOrderedByVoteDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.upVoteService/ListAllCryptosOrderedByVoteDesc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpVoteServiceServer).ListAllCryptosOrderedByVoteDesc(ctx, req.(*RequestListAllCryptos))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpVoteService_ListAllCryptosOrderedByVoteAsc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestListAllCryptos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpVoteServiceServer).ListAllCryptosOrderedByVoteAsc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.upVoteService/ListAllCryptosOrderedByVoteAsc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpVoteServiceServer).ListAllCryptosOrderedByVoteAsc(ctx, req.(*RequestListAllCryptos))
	}
	return interceptor(ctx, in, info, handler)
}

// UpVoteService_ServiceDesc is the grpc.ServiceDesc for UpVoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpVoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.upVoteService",
	HandlerType: (*UpVoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateACrypto",
			Handler:    _UpVoteService_CreateACrypto_Handler,
		},
		{
			MethodName: "EditACrypto",
			Handler:    _UpVoteService_EditACrypto_Handler,
		},
		{
			MethodName: "DeleteACrypto",
			Handler:    _UpVoteService_DeleteACrypto_Handler,
		},
		{
			MethodName: "ListAllCryptosOrderedByVoteDesc",
			Handler:    _UpVoteService_ListAllCryptosOrderedByVoteDesc_Handler,
		},
		{
			MethodName: "ListAllCryptosOrderedByVoteAsc",
			Handler:    _UpVoteService_ListAllCryptosOrderedByVoteAsc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desafiotecnico.proto",
}
