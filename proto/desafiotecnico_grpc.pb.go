// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1--rc1
// source: desafiotecnico.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpVoteServiceClient is the client API for UpVoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpVoteServiceClient interface {
	CriarNovaCriptoMoeda(ctx context.Context, in *NovaCriptoRequest, opts ...grpc.CallOption) (*NovaCriptoResponse, error)
}

type upVoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpVoteServiceClient(cc grpc.ClientConnInterface) UpVoteServiceClient {
	return &upVoteServiceClient{cc}
}

func (c *upVoteServiceClient) CriarNovaCriptoMoeda(ctx context.Context, in *NovaCriptoRequest, opts ...grpc.CallOption) (*NovaCriptoResponse, error) {
	out := new(NovaCriptoResponse)
	err := c.cc.Invoke(ctx, "/proto.upVoteService/CriarNovaCriptoMoeda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpVoteServiceServer is the server API for UpVoteService service.
// All implementations must embed UnimplementedUpVoteServiceServer
// for forward compatibility
type UpVoteServiceServer interface {
	CriarNovaCriptoMoeda(context.Context, *NovaCriptoRequest) (*NovaCriptoResponse, error)
	mustEmbedUnimplementedUpVoteServiceServer()
}

// UnimplementedUpVoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpVoteServiceServer struct {
}

func (UnimplementedUpVoteServiceServer) CriarNovaCriptoMoeda(context.Context, *NovaCriptoRequest) (*NovaCriptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CriarNovaCriptoMoeda not implemented")
}
func (UnimplementedUpVoteServiceServer) mustEmbedUnimplementedUpVoteServiceServer() {}

// UnsafeUpVoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpVoteServiceServer will
// result in compilation errors.
type UnsafeUpVoteServiceServer interface {
	mustEmbedUnimplementedUpVoteServiceServer()
}

func RegisterUpVoteServiceServer(s grpc.ServiceRegistrar, srv UpVoteServiceServer) {
	s.RegisterService(&UpVoteService_ServiceDesc, srv)
}

func _UpVoteService_CriarNovaCriptoMoeda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovaCriptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpVoteServiceServer).CriarNovaCriptoMoeda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.upVoteService/CriarNovaCriptoMoeda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpVoteServiceServer).CriarNovaCriptoMoeda(ctx, req.(*NovaCriptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpVoteService_ServiceDesc is the grpc.ServiceDesc for UpVoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpVoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.upVoteService",
	HandlerType: (*UpVoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CriarNovaCriptoMoeda",
			Handler:    _UpVoteService_CriarNovaCriptoMoeda_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "desafiotecnico.proto",
}
