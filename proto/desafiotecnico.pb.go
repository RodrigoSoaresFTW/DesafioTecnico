// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1--rc1
// source: desafiotecnico.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CryptoCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol    string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Votes     int32  `protobuf:"varint,4,opt,name=votes,proto3" json:"votes,omitempty"`
	Createdat string `protobuf:"bytes,5,opt,name=createdat,proto3" json:"createdat,omitempty"`
	Updateat  string `protobuf:"bytes,6,opt,name=updateat,proto3" json:"updateat,omitempty"`
}

func (x *CryptoCoin) Reset() {
	*x = CryptoCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoCoin) ProtoMessage() {}

func (x *CryptoCoin) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoCoin.ProtoReflect.Descriptor instead.
func (*CryptoCoin) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{0}
}

func (x *CryptoCoin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CryptoCoin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CryptoCoin) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CryptoCoin) GetVotes() int32 {
	if x != nil {
		return x.Votes
	}
	return 0
}

func (x *CryptoCoin) GetCreatedat() string {
	if x != nil {
		return x.Createdat
	}
	return ""
}

func (x *CryptoCoin) GetUpdateat() string {
	if x != nil {
		return x.Updateat
	}
	return ""
}

type RequestNewCrypto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol    string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Createdat string `protobuf:"bytes,4,opt,name=createdat,proto3" json:"createdat,omitempty"`
}

func (x *RequestNewCrypto) Reset() {
	*x = RequestNewCrypto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestNewCrypto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestNewCrypto) ProtoMessage() {}

func (x *RequestNewCrypto) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestNewCrypto.ProtoReflect.Descriptor instead.
func (*RequestNewCrypto) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{1}
}

func (x *RequestNewCrypto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestNewCrypto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RequestNewCrypto) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *RequestNewCrypto) GetCreatedat() string {
	if x != nil {
		return x.Createdat
	}
	return ""
}

type ResponseNewCrypto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCripto *CryptoCoin `protobuf:"bytes,1,opt,name=responseCripto,proto3" json:"responseCripto,omitempty"`
}

func (x *ResponseNewCrypto) Reset() {
	*x = ResponseNewCrypto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseNewCrypto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseNewCrypto) ProtoMessage() {}

func (x *ResponseNewCrypto) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseNewCrypto.ProtoReflect.Descriptor instead.
func (*ResponseNewCrypto) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{2}
}

func (x *ResponseNewCrypto) GetResponseCripto() *CryptoCoin {
	if x != nil {
		return x.ResponseCripto
	}
	return nil
}

type RequestEditCrypto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *RequestEditCrypto) Reset() {
	*x = RequestEditCrypto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestEditCrypto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestEditCrypto) ProtoMessage() {}

func (x *RequestEditCrypto) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestEditCrypto.ProtoReflect.Descriptor instead.
func (*RequestEditCrypto) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{3}
}

func (x *RequestEditCrypto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestEditCrypto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RequestEditCrypto) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type ResponseEditCrypto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCripto *CryptoCoin `protobuf:"bytes,1,opt,name=responseCripto,proto3" json:"responseCripto,omitempty"`
}

func (x *ResponseEditCrypto) Reset() {
	*x = ResponseEditCrypto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseEditCrypto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseEditCrypto) ProtoMessage() {}

func (x *ResponseEditCrypto) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseEditCrypto.ProtoReflect.Descriptor instead.
func (*ResponseEditCrypto) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{4}
}

func (x *ResponseEditCrypto) GetResponseCripto() *CryptoCoin {
	if x != nil {
		return x.ResponseCripto
	}
	return nil
}

type RequestDeleteCrypto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RequestDeleteCrypto) Reset() {
	*x = RequestDeleteCrypto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDeleteCrypto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDeleteCrypto) ProtoMessage() {}

func (x *RequestDeleteCrypto) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDeleteCrypto.ProtoReflect.Descriptor instead.
func (*RequestDeleteCrypto) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{5}
}

func (x *RequestDeleteCrypto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ResponseDeleteCrypto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponseDeleteCrypto) Reset() {
	*x = ResponseDeleteCrypto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDeleteCrypto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDeleteCrypto) ProtoMessage() {}

func (x *ResponseDeleteCrypto) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDeleteCrypto.ProtoReflect.Descriptor instead.
func (*ResponseDeleteCrypto) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{6}
}

type RequestListAllCryptos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestListAllCryptos) Reset() {
	*x = RequestListAllCryptos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestListAllCryptos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestListAllCryptos) ProtoMessage() {}

func (x *RequestListAllCryptos) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestListAllCryptos.ProtoReflect.Descriptor instead.
func (*RequestListAllCryptos) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{7}
}

type ResponseListAllCryptos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCripto []*CryptoCoin `protobuf:"bytes,1,rep,name=responseCripto,proto3" json:"responseCripto,omitempty"`
}

func (x *ResponseListAllCryptos) Reset() {
	*x = ResponseListAllCryptos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseListAllCryptos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseListAllCryptos) ProtoMessage() {}

func (x *ResponseListAllCryptos) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseListAllCryptos.ProtoReflect.Descriptor instead.
func (*ResponseListAllCryptos) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{8}
}

func (x *ResponseListAllCryptos) GetResponseCripto() []*CryptoCoin {
	if x != nil {
		return x.ResponseCripto
	}
	return nil
}

var File_desafiotecnico_proto protoreflect.FileDescriptor

var file_desafiotecnico_proto_rawDesc = []byte{
	0x0a, 0x14, 0x64, 0x65, 0x73, 0x61, 0x66, 0x69, 0x6f, 0x74, 0x65, 0x63, 0x6e, 0x69, 0x63, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x01,
	0x0a, 0x0a, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x74, 0x22, 0x6c, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x22, 0x4e, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x4f, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x64, 0x69, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x39, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x16, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x73,
	0x22, 0x53, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x32, 0xaa, 0x03, 0x0a, 0x0d, 0x75, 0x70, 0x56, 0x6f, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0b, 0x45, 0x64, 0x69, 0x74, 0x41, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x64, 0x69, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x22, 0x00, 0x12,
	0x60, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x73,
	0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x73, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x56, 0x6f, 0x74, 0x65,
	0x41, 0x73, 0x63, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x73, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x73,
	0x22, 0x00, 0x42, 0x16, 0x5a, 0x14, 0x44, 0x65, 0x73, 0x61, 0x66, 0x69, 0x6f, 0x54, 0x65, 0x63,
	0x6e, 0x69, 0x63, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_desafiotecnico_proto_rawDescOnce sync.Once
	file_desafiotecnico_proto_rawDescData = file_desafiotecnico_proto_rawDesc
)

func file_desafiotecnico_proto_rawDescGZIP() []byte {
	file_desafiotecnico_proto_rawDescOnce.Do(func() {
		file_desafiotecnico_proto_rawDescData = protoimpl.X.CompressGZIP(file_desafiotecnico_proto_rawDescData)
	})
	return file_desafiotecnico_proto_rawDescData
}

var file_desafiotecnico_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_desafiotecnico_proto_goTypes = []interface{}{
	(*CryptoCoin)(nil),             // 0: proto.CryptoCoin
	(*RequestNewCrypto)(nil),       // 1: proto.RequestNewCrypto
	(*ResponseNewCrypto)(nil),      // 2: proto.ResponseNewCrypto
	(*RequestEditCrypto)(nil),      // 3: proto.RequestEditCrypto
	(*ResponseEditCrypto)(nil),     // 4: proto.ResponseEditCrypto
	(*RequestDeleteCrypto)(nil),    // 5: proto.RequestDeleteCrypto
	(*ResponseDeleteCrypto)(nil),   // 6: proto.ResponseDeleteCrypto
	(*RequestListAllCryptos)(nil),  // 7: proto.RequestListAllCryptos
	(*ResponseListAllCryptos)(nil), // 8: proto.ResponseListAllCryptos
}
var file_desafiotecnico_proto_depIdxs = []int32{
	0, // 0: proto.ResponseNewCrypto.responseCripto:type_name -> proto.CryptoCoin
	0, // 1: proto.ResponseEditCrypto.responseCripto:type_name -> proto.CryptoCoin
	0, // 2: proto.ResponseListAllCryptos.responseCripto:type_name -> proto.CryptoCoin
	1, // 3: proto.upVoteService.CreateACrypto:input_type -> proto.RequestNewCrypto
	3, // 4: proto.upVoteService.EditACrypto:input_type -> proto.RequestEditCrypto
	5, // 5: proto.upVoteService.DeleteACrypto:input_type -> proto.RequestDeleteCrypto
	7, // 6: proto.upVoteService.ListAllCryptosOrderedByVoteDesc:input_type -> proto.RequestListAllCryptos
	7, // 7: proto.upVoteService.ListAllCryptosOrderedByVoteAsc:input_type -> proto.RequestListAllCryptos
	2, // 8: proto.upVoteService.CreateACrypto:output_type -> proto.ResponseNewCrypto
	4, // 9: proto.upVoteService.EditACrypto:output_type -> proto.ResponseEditCrypto
	6, // 10: proto.upVoteService.DeleteACrypto:output_type -> proto.ResponseDeleteCrypto
	8, // 11: proto.upVoteService.ListAllCryptosOrderedByVoteDesc:output_type -> proto.ResponseListAllCryptos
	8, // 12: proto.upVoteService.ListAllCryptosOrderedByVoteAsc:output_type -> proto.ResponseListAllCryptos
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_desafiotecnico_proto_init() }
func file_desafiotecnico_proto_init() {
	if File_desafiotecnico_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_desafiotecnico_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desafiotecnico_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestNewCrypto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desafiotecnico_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseNewCrypto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desafiotecnico_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestEditCrypto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desafiotecnico_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseEditCrypto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desafiotecnico_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDeleteCrypto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desafiotecnico_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDeleteCrypto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desafiotecnico_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestListAllCryptos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desafiotecnico_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseListAllCryptos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_desafiotecnico_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_desafiotecnico_proto_goTypes,
		DependencyIndexes: file_desafiotecnico_proto_depIdxs,
		MessageInfos:      file_desafiotecnico_proto_msgTypes,
	}.Build()
	File_desafiotecnico_proto = out.File
	file_desafiotecnico_proto_rawDesc = nil
	file_desafiotecnico_proto_goTypes = nil
	file_desafiotecnico_proto_depIdxs = nil
}
