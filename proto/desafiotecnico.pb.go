// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1--rc1
// source: desafiotecnico.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NovaCriptoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol    string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Createdat string `protobuf:"bytes,4,opt,name=createdat,proto3" json:"createdat,omitempty"`
}

func (x *NovaCriptoRequest) Reset() {
	*x = NovaCriptoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovaCriptoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovaCriptoRequest) ProtoMessage() {}

func (x *NovaCriptoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovaCriptoRequest.ProtoReflect.Descriptor instead.
func (*NovaCriptoRequest) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{0}
}

func (x *NovaCriptoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NovaCriptoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NovaCriptoRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *NovaCriptoRequest) GetCreatedat() string {
	if x != nil {
		return x.Createdat
	}
	return ""
}

type NovaCriptoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol    string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Votes     int32  `protobuf:"varint,4,opt,name=votes,proto3" json:"votes,omitempty"`
	Createdat string `protobuf:"bytes,5,opt,name=createdat,proto3" json:"createdat,omitempty"`
	Updatedat string `protobuf:"bytes,6,opt,name=updatedat,proto3" json:"updatedat,omitempty"`
}

func (x *NovaCriptoResponse) Reset() {
	*x = NovaCriptoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovaCriptoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovaCriptoResponse) ProtoMessage() {}

func (x *NovaCriptoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovaCriptoResponse.ProtoReflect.Descriptor instead.
func (*NovaCriptoResponse) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{1}
}

func (x *NovaCriptoResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NovaCriptoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NovaCriptoResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *NovaCriptoResponse) GetVotes() int32 {
	if x != nil {
		return x.Votes
	}
	return 0
}

func (x *NovaCriptoResponse) GetCreatedat() string {
	if x != nil {
		return x.Createdat
	}
	return ""
}

func (x *NovaCriptoResponse) GetUpdatedat() string {
	if x != nil {
		return x.Updatedat
	}
	return ""
}

type NovaCriptoResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cripto *CriptoMoeda `protobuf:"bytes,1,opt,name=cripto,proto3" json:"cripto,omitempty"`
}

func (x *NovaCriptoResponseV2) Reset() {
	*x = NovaCriptoResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovaCriptoResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovaCriptoResponseV2) ProtoMessage() {}

func (x *NovaCriptoResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovaCriptoResponseV2.ProtoReflect.Descriptor instead.
func (*NovaCriptoResponseV2) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{2}
}

func (x *NovaCriptoResponseV2) GetCripto() *CriptoMoeda {
	if x != nil {
		return x.Cripto
	}
	return nil
}

//lista de cripto
type ListaDeCriptoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cripto []*CriptoMoeda `protobuf:"bytes,1,rep,name=cripto,proto3" json:"cripto,omitempty"`
}

func (x *ListaDeCriptoResponse) Reset() {
	*x = ListaDeCriptoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListaDeCriptoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListaDeCriptoResponse) ProtoMessage() {}

func (x *ListaDeCriptoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListaDeCriptoResponse.ProtoReflect.Descriptor instead.
func (*ListaDeCriptoResponse) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{3}
}

func (x *ListaDeCriptoResponse) GetCripto() []*CriptoMoeda {
	if x != nil {
		return x.Cripto
	}
	return nil
}

type CriptoMoeda struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Nome      string `protobuf:"bytes,2,opt,name=nome,proto3" json:"nome,omitempty"`
	Simbolo   string `protobuf:"bytes,3,opt,name=simbolo,proto3" json:"simbolo,omitempty"`
	Votos     int32  `protobuf:"varint,4,opt,name=votos,proto3" json:"votos,omitempty"`
	Createdat string `protobuf:"bytes,5,opt,name=createdat,proto3" json:"createdat,omitempty"`
	Updateat  string `protobuf:"bytes,6,opt,name=updateat,proto3" json:"updateat,omitempty"`
}

func (x *CriptoMoeda) Reset() {
	*x = CriptoMoeda{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desafiotecnico_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CriptoMoeda) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CriptoMoeda) ProtoMessage() {}

func (x *CriptoMoeda) ProtoReflect() protoreflect.Message {
	mi := &file_desafiotecnico_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CriptoMoeda.ProtoReflect.Descriptor instead.
func (*CriptoMoeda) Descriptor() ([]byte, []int) {
	return file_desafiotecnico_proto_rawDescGZIP(), []int{4}
}

func (x *CriptoMoeda) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CriptoMoeda) GetNome() string {
	if x != nil {
		return x.Nome
	}
	return ""
}

func (x *CriptoMoeda) GetSimbolo() string {
	if x != nil {
		return x.Simbolo
	}
	return ""
}

func (x *CriptoMoeda) GetVotos() int32 {
	if x != nil {
		return x.Votos
	}
	return 0
}

func (x *CriptoMoeda) GetCreatedat() string {
	if x != nil {
		return x.Createdat
	}
	return ""
}

func (x *CriptoMoeda) GetUpdateat() string {
	if x != nil {
		return x.Updateat
	}
	return ""
}

var File_desafiotecnico_proto protoreflect.FileDescriptor

var file_desafiotecnico_proto_rawDesc = []byte{
	0x0a, 0x14, 0x64, 0x65, 0x73, 0x61, 0x66, 0x69, 0x6f, 0x74, 0x65, 0x63, 0x6e, 0x69, 0x63, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a,
	0x11, 0x4e, 0x6f, 0x76, 0x61, 0x43, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x22, 0xa2, 0x01, 0x0a,
	0x12, 0x4e, 0x6f, 0x76, 0x61, 0x43, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x61,
	0x74, 0x22, 0x42, 0x0a, 0x14, 0x4e, 0x6f, 0x76, 0x61, 0x43, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x4d, 0x6f, 0x65, 0x64, 0x61, 0x52, 0x06, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x61, 0x44, 0x65,
	0x43, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x06, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x4d, 0x6f, 0x65,
	0x64, 0x61, 0x52, 0x06, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x43,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x4d, 0x6f, 0x65, 0x64, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x69, 0x6d, 0x62, 0x6f, 0x6c, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x69, 0x6d, 0x62, 0x6f, 0x6c, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x6f,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x74, 0x32, 0x5e, 0x0a, 0x0d, 0x75, 0x70, 0x56, 0x6f,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x43, 0x72, 0x69,
	0x61, 0x72, 0x4e, 0x6f, 0x76, 0x61, 0x43, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x4d, 0x6f, 0x65, 0x64,
	0x61, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x76, 0x61, 0x43, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x76, 0x61, 0x43, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x16, 0x5a, 0x14, 0x44, 0x65, 0x73, 0x61,
	0x66, 0x69, 0x6f, 0x54, 0x65, 0x63, 0x6e, 0x69, 0x63, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_desafiotecnico_proto_rawDescOnce sync.Once
	file_desafiotecnico_proto_rawDescData = file_desafiotecnico_proto_rawDesc
)

func file_desafiotecnico_proto_rawDescGZIP() []byte {
	file_desafiotecnico_proto_rawDescOnce.Do(func() {
		file_desafiotecnico_proto_rawDescData = protoimpl.X.CompressGZIP(file_desafiotecnico_proto_rawDescData)
	})
	return file_desafiotecnico_proto_rawDescData
}

var file_desafiotecnico_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_desafiotecnico_proto_goTypes = []interface{}{
	(*NovaCriptoRequest)(nil),     // 0: proto.NovaCriptoRequest
	(*NovaCriptoResponse)(nil),    // 1: proto.NovaCriptoResponse
	(*NovaCriptoResponseV2)(nil),  // 2: proto.NovaCriptoResponseV2
	(*ListaDeCriptoResponse)(nil), // 3: proto.ListaDeCriptoResponse
	(*CriptoMoeda)(nil),           // 4: proto.CriptoMoeda
}
var file_desafiotecnico_proto_depIdxs = []int32{
	4, // 0: proto.NovaCriptoResponseV2.cripto:type_name -> proto.CriptoMoeda
	4, // 1: proto.ListaDeCriptoResponse.cripto:type_name -> proto.CriptoMoeda
	0, // 2: proto.upVoteService.CriarNovaCriptoMoeda:input_type -> proto.NovaCriptoRequest
	1, // 3: proto.upVoteService.CriarNovaCriptoMoeda:output_type -> proto.NovaCriptoResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_desafiotecnico_proto_init() }
func file_desafiotecnico_proto_init() {
	if File_desafiotecnico_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_desafiotecnico_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovaCriptoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desafiotecnico_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovaCriptoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desafiotecnico_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovaCriptoResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desafiotecnico_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListaDeCriptoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desafiotecnico_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CriptoMoeda); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_desafiotecnico_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_desafiotecnico_proto_goTypes,
		DependencyIndexes: file_desafiotecnico_proto_depIdxs,
		MessageInfos:      file_desafiotecnico_proto_msgTypes,
	}.Build()
	File_desafiotecnico_proto = out.File
	file_desafiotecnico_proto_rawDesc = nil
	file_desafiotecnico_proto_goTypes = nil
	file_desafiotecnico_proto_depIdxs = nil
}
